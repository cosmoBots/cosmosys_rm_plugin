{"version":3,"sources":["App.js","index.js"],"names":["maxDepth","Button","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","disabled","onClick","label","ActionButton","styles","type","className","style","verticalAlign","simplifyNode","nodes","reduce","acc","n","obj","id","children","length","push","App","state","searchString","searchFocusIndex","searchFoundCount","treeData","treeHasChanges","componentDidMount","_this","retrieveTree","axios","get","concat","nodeId","crossdomain","then","res","console","log","data","setState","returnUrl","return_url","refreshTree","actionWindow","actionNode","onActionButtonClick","node","url","window","open","openActionWindow","timer","setInterval","closed","clearInterval","doCommitJSON","post","structure","handleTreeOnChange","handleSearchOnChange","e","target","value","selectPrevMatch","_this$state","selectNextMatch","_this$state2","toggleNodeExpansion","expanded","prevState","toggleExpandedForAll","renderTree","_this$state3","react_sortable_tree__WEBPACK_IMPORTED_MODULE_6__","onChange","onMoveNode","_ref2","treeIndex","path","global","debug","searchQuery","searchFocusOffset","canDrag","_ref3","noDragging","canDrop","_ref4","nextParent","noChildren","searchFinishCallback","matches","isVirtualized","generateNodeProps","rowInfo","buttons","issue_edit_url","issue_new_url","issue_show_url","renderVeil","content","_this$state4","this","bind","React","Component","__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","react_dom__WEBPACK_IMPORTED_MODULE_1__","react_dom__WEBPACK_IMPORTED_MODULE_1___default","_App__WEBPACK_IMPORTED_MODULE_2__","URLSearchParams","location","search","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.6b98a6c0.chunk.js","sourcesContent":["import React from 'react';\nimport SortableTree, { toggleExpandedForAll } from 'react-sortable-tree';\n\nimport axios from 'axios';\n\n//import treeData from './treeData';\n\nconst maxDepth = 5;\n\nconst alertNodeInfo = ({ node, path, treeIndex }) => {\n  const objectString = Object.keys(node)\n    .map(k => (k === 'children' ? 'children: Array' : `${k}: '${node[k]}'`))\n    .join(',\\n   ');\n\n  global.alert(\n    'Info passed to the button generator:\\n\\n' +\n      `node: {\\n   ${objectString}\\n},\\n` +\n      `path: [${path.join(', ')}],\\n` +\n      `treeIndex: ${treeIndex}`\n  );\n};\n\n// Renders a basic button, disabled with the \"disabled\" property\nfunction Button(props) {\n  return (\n      <button disabled={props.disabled} onClick={!props.disabled?props.onClick:null}>{props.label}</button>\n    );\n}\n\nfunction openActionWindow(url) {\n  return window.open(url, 'RedmineAction', 'height=250,width=250');\n}\n\nfunction ActionButton(props) {\n  const styles = ['btn', 'btn-outline-success', props.type];\n  return (\n    <button\n                  className={styles} \n                  style={{\n                    verticalAlign: 'middle',\n                  }}\n                  disabled={props.disabled}\n                  onClick={!props.disabled?props.onClick:null}>\n                  {props.label}\n                </button>\n    );\n}\n\nfunction simplifyNode(nodes) {\n\n  return nodes.reduce((acc, n) => {\n      //console.log(\"simplifyNode()\", acc, n)\n\n      var obj = {\n        id: n.id\n      }\n\n      if (n.children && n.children.length ) {\n        obj.children = simplifyNode(n.children);\n      }\n\n      acc.push(obj);\n      return acc;\n    }, []);\n}\n\nexport default class App extends React.Component {\n  state = {\n    searchString: '',\n    searchFocusIndex: 0,\n    searchFoundCount: null,\n    treeData: null,\n    treeHasChanges: false,\n  };\n\n componentDidMount = () => {\n    this.retrieveTree();\n };\n\n  retrieveTree = () => {\n    axios.get(`http://localhost:5557/cosmosys_baselines/9/execute.json?node_id=${this.props.nodeId}`, { crossdomain: true })\n      .then(res => {\n        console.log(\"reqtreedata.json\", res.data);\n        this.setState({\n          treeData: res.data,\n          returnUrl: res.data[0].return_url\n        });\n      })\n  };\n\n  refreshTree = () => {\n    this.setState({\n              treeData: null,\n              actionWindow: null,\n              actionNode: null,\n            }, this.retrieveTree\n          );\n  }\n\n  onActionButtonClick = (node, url) => {\n    const actionWindow = openActionWindow(url);\n\n    this.setState( {\n      actionWindow: actionWindow,\n      actionNode: node\n    });\n\n    var timer = setInterval(() => {   \n      if (actionWindow.closed) {  \n          clearInterval(timer);  \n          this.refreshTree();\n      }  \n    }, 500); \n  };\n\n  doCommitJSON = () => {\n    console.log(\"hola commit!\", this.state.returnUrl, simplifyNode(this.state.treeData));\n\n    axios.post(this.state.returnUrl, { \n          structure: simplifyNode(this.state.treeData)\n        })\n      .then(res => {\n        console.log(res);\n        console.log(res.data);\n\n        this.refreshTree();\n      })\n  };\n\n  handleTreeOnChange = (treeData) => {\n    this.setState({\n      treeData: treeData,\n      treeHasChanges: true\n    });\n    console.log(treeData);\n  };\n\n  handleSearchOnChange = e => {\n    this.setState({\n      searchString: e.target.value,\n    });\n  };\n\n  selectPrevMatch = () => {\n    const { searchFocusIndex, searchFoundCount } = this.state;\n\n    this.setState({\n      searchFocusIndex:\n        searchFocusIndex !== null\n          ? (searchFoundCount + searchFocusIndex - 1) % searchFoundCount\n          : searchFoundCount - 1,\n    });\n  };\n\n  selectNextMatch = () => {\n    const { searchFocusIndex, searchFoundCount } = this.state;\n\n    this.setState({\n      searchFocusIndex:\n        searchFocusIndex !== null\n          ? (searchFocusIndex + 1) % searchFoundCount\n          : 0,\n    });\n  };\n\n  toggleNodeExpansion = expanded => {\n    this.setState(prevState => ({\n      treeData: toggleExpandedForAll({\n        treeData: prevState.treeData,\n        expanded,\n      }),\n    }));\n  };\n\n  renderTree = () => {\n\nconsole.log(\"renderTree()\", !!this.state.treeData)\n\n    if (this.state.treeData) {\n\n      const {\n        treeData,\n        treeHasChanges,\n        searchString,\n        searchFocusIndex,\n      } = this.state;\n\n      return (\n        <SortableTree\n            treeData={treeData}\n            onChange={this.handleTreeOnChange}\n            onMoveNode={({ node, treeIndex, path }) =>\n              global.console.debug(\n                'node:',\n                node,\n                'treeIndex:',\n                treeIndex,\n                'path:',\n                path\n              )\n            }\n            maxDepth={maxDepth}\n            searchQuery={searchString}\n            searchFocusOffset={searchFocusIndex}\n            canDrag={({ node }) => !node.noDragging}\n            canDrop={({ nextParent }) => !nextParent || !nextParent.noChildren}\n            searchFinishCallback={matches =>\n              this.setState({\n                searchFoundCount: matches.length,\n                searchFocusIndex:\n                  matches.length > 0 ? searchFocusIndex % matches.length : 0,\n              })\n            }\n            isVirtualized={true}\n            generateNodeProps={rowInfo => ({\n              buttons: [\n                <ActionButton\n                  type=\"edit\"\n                  disabled={treeHasChanges}\n                  label=\"Edit\"\n                  onClick={() => { this.onActionButtonClick(rowInfo.node, rowInfo.node.issue_edit_url);} }\n                 />,\n                <ActionButton\n                  type=\"new\"\n                  disabled={treeHasChanges}\n                  label=\"New\"\n                  onClick={() => { this.onActionButtonClick(rowInfo.node, rowInfo.node.issue_new_url);} }\n                 />,\n                <ActionButton\n                  type=\"show\"\n                  disabled={treeHasChanges}\n                  label=\"Show\"\n                  onClick={() => { this.onActionButtonClick(rowInfo.node, rowInfo.node.issue_show_url);} }\n                 />,\n              ],\n            })}\n          />\n        );\n      } else {\n        return (<span>Loading tree...</span>);\n      }\n  };\n\n  renderVeil = (content) => {\n    if (this.state.actionWindow) {\n      return (content)\n    } else {\n      return (content)\n    }\n  };\n\n  render() {\nconsole.log(\"render()\")\n\n      const {\n        searchFocusIndex,\n        searchFoundCount,\n        actionWindow,\n      } = this.state;\n\n    return this.renderVeil(\n      <div className='wrapper'>\n        <div className=\"bar-wrapper\">\n          <button onClick={this.toggleNodeExpansion.bind(this, true)}>\n            Expand all\n          </button>\n          <button\n            className=\"collapse\"\n            onClick={this.toggleNodeExpansion.bind(this, false)}\n          >\n            Collapse all\n          </button>\n          <label>Search: </label>\n          <input onChange={this.handleSearchOnChange} />\n          <button className=\"previous\" onClick={this.selectPrevMatch}>\n            Previous\n          </button>\n          <button className=\"next\" onClick={this.selectNextMatch}>\n            Next\n          </button>\n          <label>\n            {searchFocusIndex} / {searchFoundCount}\n          </label>\n          <Button label=\"commit\" disabled={!this.state.treeHasChanges} onClick={this.doCommitJSON}/>\n        </div>\n        <div className=\"tree-wrapper\">\n          { this.renderTree() }\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './styles.css';\nimport 'react-sortable-tree/style.css';\n\n const query = new URLSearchParams(window.location.search);\n const nodeId = query.get('node_id')\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App nodeId={nodeId}/>, rootElement);"],"sourceRoot":""}